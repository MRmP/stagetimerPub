'use strict';

const ipaddrLocal = "/home/pi/stagetimer/public/ipaddr.txt";
const dhcpcdConf = "/etc/dhcpcd.conf";
//const dhcpcdConf = "D:/Development/stagetimer/exclude/debug/dhcpcd.conf";


module.exports = class SettingsNetworkEdit {
    constructor(stimer) {
        this.stimer = stimer;
        this.title = "SettingsNetworkEdit";

        this.enableSave = false;
        this.hasChanged = false;
        this.mode;
        this.currentValue;
        this.d_value;
    }

    buttonAction(keyIndex) {
        switch (keyIndex) {
            case 0:
                this.stimer.SettingsNetwork.display();
                break;
            case 1:
                if (this.checkArrow(3)) {
                    this.updateValue(3, 1);
                }
                break;
            case 2:
                if (this.checkArrow(2)) {
                    this.updateValue(2, 1);
                }
                break;
            case 3:
                if (this.checkArrow(1)) {
                    this.updateValue(1, 1);
                }
                break;
            case 4:
                if (this.checkArrow(0)) {
                    this.updateValue(0, 1);
                }
                break;
            case 11:
                if (this.checkArrow(3)) {
                    this.updateValue(3, -1);
                }
                break;
            case 12:
                if (this.checkArrow(2)) {
                    this.updateValue(2, -1);
                }
                break;
            case 13:
                if (this.checkArrow(1)) {
                    this.updateValue(1, -1);
                }
                break;
            case 14:
                if (this.checkArrow(0)) {
                    this.updateValue(0, -1);
                }
                break;
            case 6:
                if (!this.checkArrow(2)) return;
                if (this.mode === "netmask") {
                    this.updateValue(3, 100);
                }
                else {
                    this.updateValue(3, this.d_value[3] - this.currentValue[3]);
                }
                break;
            case 7:
                if (!this.checkArrow(2)) return;
                if (this.mode === "netmask") {
                    this.updateValue(3, 100);
                }
                else {
                    this.updateValue(2, this.d_value[2] - this.currentValue[2]);
                }
                break;
            case 8:
                if (!this.checkArrow(2)) return;
                if (this.mode === "netmask") {
                    this.updateValue(3, 100);
                }
                else {
                    this.updateValue(1, this.d_value[1] - this.currentValue[1]);
                }
                break;
            case 9:
                if (!this.checkArrow(2)) return;
                if (this.mode === "netmask") {
                    this.updateValue(3, 100);
                }
                else {
                    this.updateValue(0, this.d_value[0] - this.currentValue[0]);
                }
                break;
            case 5:
                if (this.enableSave) {
                    this.saveSettings();
                }
                break;
        }
    }

    buttonActionPressing(keyIndex) {
        switch (keyIndex) {
            case 1:
                if (this.checkArrow(3)) {
                    this.updateValue(3, 1);
                }
                break;
            case 2:
                if (this.checkArrow(2)) {
                    this.updateValue(2, 1);
                }
                break;
            case 3:
                if (this.checkArrow(1)) {
                    this.updateValue(1, 1);
                }
                break;
            case 4:
                if (this.checkArrow(0)) {
                    this.updateValue(0, 1);
                }
                break;
            case 11:
                if (this.checkArrow(3)) {
                    this.updateValue(3, -1);
                }
                break;
            case 12:
                if (this.checkArrow(2)) {
                    this.updateValue(2, -1);
                }
                break;
            case 13:
                if (this.checkArrow(1)) {
                    this.updateValue(1, -1);
                }
                break;
            case 14:
                if (this.checkArrow(0)) {
                    this.updateValue(0, -1);
                }
                break;
        }
    }

    async display() {
       this.stimer.SetCurrentPage(this);
        this.stimer.clearAllKeys();

        this.stimer.displayImage(0, this.title, 'menu.png');

        var ip = "";
        var netmask = "";
        var gw = "";

        if (this.stimer.SettingsNetwork.isDHCP) {
            var ifconfig = await this.stimer.SettingsNetwork.getIfconfig();
            var gwconfig = await this.stimer.SettingsNetwork.getGateway(); 
            ip = ifconfig[0].split(".");
            netmask = ifconfig[1].split(".");
            gw = gwconfig.split(".");
        }
        else
        {
            let _ipline = await this.stimer.SettingsNetwork.getline("static ip_address=");
            let _gwline = await this.stimer.SettingsNetwork.getline("static routers=");

            let a = _ipline.indexOf('/');
            let b = _ipline.indexOf('=');
            let str = _ipline.substr(a + 1);
            netmask = this.stimer.SettingsNetwork.netToSubnet[str].split(".");
            ip = _ipline.substr(b + 1, a - b - 1).split(".");

            gw = _gwline.substr(_gwline.indexOf('=') + 1).split(".");

            this.subnetPos = this.getIndexOfMap(this.stimer.SettingsNetwork.netToSubnet, str);
        }


        this.hasChanged = false;
        console.log("Network debug: mode:" + this.mode);
        switch (this.mode) {
            case "gw":
                if (this.stimer.SettingsNetwork.gw !== undefined) {
                    this.hasChanged = true;
                    this.currentValue = this.stimer.SettingsNetwork.gw;
                    this.d_value = gw;
                }
                else {
                    this.currentValue = gw;
                }
                
                break;
            case "netmask":
                if (this.stimer.SettingsNetwork.netmask !== undefined) {
                    this.hasChanged = true;
                    this.currentValue = this.stimer.SettingsNetwork.netToSubnet[this.stimer.SettingsNetwork.netmask];
                    this.subnetPos = this.getIndexOfMap(this.stimer.SettingsNetwork.netToSubnet, this.stimer.SettingsNetwork.netmask);
                    this.d_value = netmask;
                }
                else {
                    this.currentValue = netmask;
                }
                break;
            case "ip":
                if (this.stimer.SettingsNetwork.ip !== undefined) {
                    console.log("Network debug: ip!==undefined");
                    this.hasChanged = true;
                    this.currentValue = this.stimer.SettingsNetwork.ip;
                    this.d_value = ip;
                }
                else {
                    console.log("Network debug: ip:"+ip);
                    this.currentValue = ip;
                }
                break;
        }

        if (!this.hasChanged) {
            //Save original
            //N� skal du h�re, siden currentValue er et objekt (en liste) og ikke bare en str,int etc. s� blir a=b en referanse ikke en kopi av verdien
            //s� ved � slice s� f�r vi en kopi :)
            this.d_value = this.currentValue.slice();
        }        

        //display numbers
        this.displayNumbers();
        this.displayArrows();
        this.setSaveIcon();
    }

    getIndexOfMap(map, str) {
        let int = 0;
        for (let key in map) {
            if (key.toString() === str.toString()) {
                return int;
            }
            int++;
        }
    }

    displayNumbers() {
        var val = this.currentValue;

        this.stimer.displayImage(9, this.title, 'numbers/white/' + val[0] + '.png');
        this.stimer.displayImage(8, this.title, 'numbers/white/' + val[1] + '.png');
        this.stimer.displayImage(7, this.title, 'numbers/white/' + val[2] + '.png');
        this.stimer.displayImage(6, this.title, 'numbers/white/' + val[3] + '.png');
    }
    displayArrows() {
        var isEnabled = false;
        for (var key in this.arrowMap) {
            if (this.mode === "netmask" && parseInt(key) !== 2) {
                //Ignore drawing other arrows than the ones in pos 2 and 12
                continue;
            }

            isEnabled = this.checkArrow(key);

            var color = "_grey";
            if (isEnabled) {
                color = "_blue";
            }

            this.stimer.displayImage(this.arrowMap[key][0], this.title, 'arrow_up2' + color + '.png');
            this.stimer.displayImage(this.arrowMap[key][1], this.title, 'arrow_down2' + color + '.png');
        };
    }
    
    checkArrow(key) {
        //It should count from left to right, where first digit to left is 0 and last digit is 3
        switch (parseInt(key)) {
            case 0:
                if (this.mode === "netmask" || this.stimer.SettingsNetwork.isDHCP) { return false; }
                return true;
                break;
            case 1:
                if (this.mode === "netmask" || this.stimer.SettingsNetwork.isDHCP) { return false; }
                return true
                break;
            case 2:
                if (this.stimer.SettingsNetwork.isDHCP) { return false; }
                if (this.mode === "netmask") { return true; }
                return true;
                break;
            case 3:
                if (this.mode === "netmask" || this.stimer.SettingsNetwork.isDHCP) { return false; }
                return true;
            break;
        }
    }

    updateValue(pos, int) {
        if (this.mode === "ip" || this.mode === "gw") {
            this.currentValue[pos] = parseInt(this.currentValue[pos]) + int;
            if (this.currentValue[pos] > 255) { this.currentValue[pos] = 0; }
            if (this.currentValue[pos] < 0) { this.currentValue[pos] = 255; }
        }
        else if (this.mode === "netmask") {
            if (int > 1) {
                //back to default
                this.currentValue = this.d_value;
                let sub = this.currentValue[0] + "." + this.currentValue[1] + "." + this.currentValue[2] + "." + this.currentValue[3];
                this.subnetPos = this.getIndexOfMap(this.stimer.SettingsNetwork.netToSubnet, this.stimer.SettingsNetwork.subnetToNet[sub]);
            }
            else {
                this.subnetPos = this.subnetPos + int;
                if (this.subnetPos === -1) { this.subnetPos = 26; }
                if (this.subnetPos === 27) { this.subnetPos = 0;  }
                this.currentValue = this.stimer.SettingsNetwork.netToSubnet[Object.keys(this.stimer.SettingsNetwork.netToSubnet)[this.subnetPos]].split(".");
            }
        }
        
        this.displayNumbers();
        this.displayArrows();
        this.setSaveIcon();
    }

    setSaveIcon() {
        if (this.stimer.SettingsNetwork.isDHCP || (this.currentValue.toString() === this.d_value.toString() && !this.hasChanged)) {
            this.enableSave = false;
            this.stimer.displayImage(5, this.title, 'save_grey.png');
        }
        else {
            this.enableSave = true;
            this.stimer.displayImage(5, this.title, 'save_green.png');
        }
    }

    saveSettings() {

        switch (this.mode) {
            case "ip":
                this.stimer.SettingsNetwork.ip = this.currentValue;
                console.log("Saving:"+ this.mode + ":" + this.currentValue );
                break;
            case "gw":
                this.stimer.SettingsNetwork.gw = this.currentValue;
                console.log("Saving:" +this.mode + ":" + this.currentValue );
                break;
            case "netmask":
                let sub = this.currentValue[0] + "." + this.currentValue[1] + "." + this.currentValue[2] + "." + this.currentValue[3];
                this.stimer.SettingsNetwork.netmask = this.stimer.SettingsNetwork.subnetToNet[sub];
                console.log("Saving:" + this.mode + ":" + this.stimer.SettingsNetwork.subnetToNet[sub]);
                break;
        }
        this.stimer.SettingsNetwork.display();
    }
};